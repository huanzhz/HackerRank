#Cheat Sheet Python3

### OPERATOR #############################################################
    return min(p//2, n//2 - p//2)                       ##############
    x = 15
    y = 2
    print(x // y)   #7
    #the floor division // rounds the result down to the nearest whole number

### LOOP #################################################################

    for i in alice:                                     ##############
        while (n > index and i >= mylist[index]):
            index += 1
        result.append(n+1-index) 
    return result

    for i in range(1, n + 1):                           ##############
       print(' ' * (n - i) + '#' * i)


    # enumerate return index list:(0,seq[0]),(1,seq[1]),(2,seq[2])
    leftDiagonal = 0
    rightDiagonal = 0
    for i, row in enumerate(arr):                       ##############
        leftDiagonal += row[i]
        rightDiagonal += row[-i-1]

    difference = leftDiagonal - rightDiagonal
    return abs(difference)
    #TypeError: 'int' object is not subscriptable


    numModuleBy5 = 0
    remainderOfMod5 = 0
    for i in range(len(grades)):                        ##############
        # 40 - 37 = 3 which will not modified hence it fail grade boundry
        if grades[i] > 37:
            numModuleBy5 = grades[i] % 5
            if(numModuleBy5 != 0):
                remainderOfMod5 = 5 - numModuleBy5
                if remainderOfMod5 < 3 :
                    grades[i] += remainderOfMod5
            
    return grades


    for i in range(1, len(scores)):                     ##############
        if scores[i] > maxScore:
            maxScore = scores[i]
            countMax += 1
        if scores[i] < minScore:
            minScore = scores[i]
            countMin += 1

    return [countMax, countMin]                         ############## return as list(a,b)


    count = 0
    sumValue = 0
    for index in range (len(s)):                        ##############

        sumValue = 0
        if index+m <= len(s):
            for i in range (m):
                sumValue += s[index+i]
                        
        if sumValue == d:
            count += 1

    return count

    for i in range (len(bill)):
        if i == k:
            continue                                    ##############
        chargedValue += bill[i]

### If #################################################################
    if value >= s and value <= t:                       ##############
            appleWithinRange += 1

    if b > chargedValue:
        overChargedValue = int(b - chargedValue)
        print (overChargedValue)
    else:                                               ##############
        print ("Bon Appetit")

### In built function #################################################################
    return sum(ar)                              
    maxVar = max(ar)
    print ( sum-max(arr), sum-min(arr))                    ##############

    # sort function
    # sort 2d array first value
    two_d_list = sorted(two_d_list,key=lambda l:l[0])       ##############

    countPair = 0
    ar.sort()                                               ##############
    prev = 0, None
    for curr in ar:
        if prev == curr:
            countPair += 1
            prev = None
        else:
            prev = curr
        
    return countPair

### ARRAY #################################################################

    temparraylist = []   #declare array                ###################

    #check if array is empty
    if temparraylist == []:                            ###################
        return -1

    if not temparraylist:                              ###################
        return -1

    if len(temparraylist) == 0:                         ###################
        return -1

    lastTwoCharOfString = s[-2:]
    firstTwoCharOfString = s[:2]

# start from s[2] and remove last 2 char
    return "00" + s[2:-2]

# s[2:8]-start from s[2] to s[7]
    return str(int(firstTwoCharOfString) + 12) + s[2:8]

## 2D List ###
    for i in range (1,len(arr)):
        # check type
        # find the index of the value in 2d list
        for j in range (len(two_d_list)):
            if arr[i] == two_d_list[j][0]:          
                # increase count type
                two_d_list[j][1] += 1
                newlist = False
        
        if newlist:
            two_d_list.append([arr[i],1])           ###################

        newlist = True


### Tuple | Dictionary | List ###########################################################
https://www.geeksforgeeks.org/g-fact-41-multiple-return-values-in-python/

Using a Dictionary: A Dictionary is similar to hash or map in other languages. 

Using Tuple: A Tuple is a comma separated sequence of items. It is created with or without (). 
    Tuples are immutable(cannot be edited). See this for details of tuple and list.
    
Using a list: A list is like an array of items created using square brackets. 
    They are different from arrays as they can contain items of different types. 
    Lists are different from tuples as they are mutable(can be edited).

### Return ################################################################################
    # return as string
    return "13.09."+str(year)

    return "Mouse C"                                ###################

### ZIP #####################################################################################
    for possiblity in all_possible:
        cost = 0
        for p_row, s_row in list(zip(possiblity,s)):            ###################
            #list(zip(possiblity,s)) [casting to list]
            #[([8, 1, 6], [4, 9, 2]), ([3, 5, 7], [3, 5, 7]), ([4, 9, 2], [8, 1, 5])]
            for p_num, s_num in (list(zip(p_row, s_row))):      ###################
                #list(zip(p_row, s_row)) [casting to list]
                #[(8, 4), (1, 9), (6, 2)]
                if p_num != s_num:
                    cost += abs(p_num - s_num)
        diffs.append(cost)
    return min(diffs)

### SET #####################################################################################
https://stackoverflow.com/questions/7961363/removing-duplicates-in-lists
    mylist = sorted(list(set(scores)))                          ###################
    result =[]
    index = 0
    n = len(mylist)

    for i in alice:
        while (n > index and i >= mylist[index]):
            index += 1
        result.append(n+1-index) 

    return result